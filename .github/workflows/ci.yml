name: ci

on:
  push:
    branches:
      - '**'
      # Disable builds on these branches, because they will become a pull
      # request, and be handled by merge_group below.
      - '!dependabot/**'
      # `main` and `gh-readonly-queue` are handled by merge_group specifically.
      - '!gh-readonly-queue/**'
      - '!main'
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions: {}

env:
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        build: [linux-x86_64-gnu, linux-aarch64-gnu, macos-x86_64, macos-aarch64, windows-x86_64]
        include:
        - build: linux-x86_64-gnu
          os: ubuntu-24.04
          target: x86_64-unknown-linux-gnu
          cargo_flags: "--all-features"
        - build: linux-aarch64-gnu
          os: ubuntu-24.04-arm
          target: aarch64-unknown-linux-gnu
          cargo_flags: "--all-features"
        - build: macos-x86_64
          os: macos-14
          target: x86_64-apple-darwin
          cargo_flags: "--features vendored-openssl"
        - build: macos-aarch64
          os: macos-14
          target: aarch64-apple-darwin
          cargo_flags: ""
        - build: windows-x86_64
          os: windows-2022
          target: x86_64-pc-windows-msvc
          cargo_flags: ""
    runs-on: ${{ matrix.os }}

    # TODO FIXME (aseipp): keep the timeout limit to ~15 minutes. this is long
    # enough to give us runway for the future, but also once we hit it, we're at
    # the "builds are taking too long" stage and we should start looking at ways
    # to optimize the CI.
    #
    # at the same time, this avoids some issues where some flaky, bugged tests
    # seem to be causing multi-hour runs on Windows (GPG signing issues), which
    # is a problem we should fix. in the mean time, this will make these flakes
    # less harmful, as it won't cause builds to spin for multiple hours, requiring
    # manual cancellation.
    #
    # FIXME (aseipp, 2025-02-06): bumped to 20min.
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        persist-credentials: false
    - name: Set up Windows Builders
      uses: ./.github/actions/setup-windows
    - name: Install Rust
      uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
      with:
        toolchain: 1.76
        target: ${{ matrix.target }}
    - uses: taiki-e/install-action@297054b27414ad8086f67963ce1033c02fe309c3
      with:
        tool: nextest,taplo-cli
    - name: Build
      run: cargo build --target ${{ matrix.target }} --workspace --all-targets --verbose ${{ matrix.cargo_flags }}
    - name: Test
      run: cargo nextest run --target ${{ matrix.target }} --workspace --profile ci --all-targets --verbose ${{ matrix.cargo_flags }}
      env:
        RUST_BACKTRACE: 1
        CARGO_TERM_COLOR: always

  no-git:
    name: build (no git)
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        persist-credentials: false
    - name: Install Rust
      uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
      with:
        toolchain: 1.76
    - name: Build
      run: cargo build -p jj-cli --no-default-features --verbose

  build-nix:
    name: nix flake
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-14]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: DeterminateSystems/nix-installer-action@e50d5f73bfe71c2dd0aa4218de8f4afa59f8f81d
      - run: nix flake check -L --show-trace

  check-protos:
    name: check (protos)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
        with:
          toolchain: stable
      - run: sudo apt update && sudo apt-get -y install protobuf-compiler
      - name: Generate Rust code from .proto files
        run: cargo run -p gen-protos
      - name: Check for uncommitted changes
        run: git diff --exit-code

  check-rustfmt:
    name: check (rustfmt)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
        with:
          toolchain: nightly
          components: rustfmt
      - run: cargo +nightly fmt --all -- --check

  check-clippy:
    name: check (clippy)
    permissions:
      checks: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203
        with:
          toolchain: stable
          components: clippy
      - run: cargo +stable clippy --all-features --workspace --all-targets -- -D warnings

  check-cargo-deny:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        checks:
          - advisories
          - bans
          - licenses
          - sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    name: check (cargo-deny, ${{ matrix.checks }})
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      with:
        persist-credentials: false
    - uses: EmbarkStudios/cargo-deny-action@e2f4ede4a4e60ea15ff31bc0647485d80c66cfba
      with:
        command: check ${{ matrix.checks }}

  check-codespell:
    name: check (codespell)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38
        with:
          python-version: 3.11
      - name: Install uv
        uses: astral-sh/setup-uv@4db96194c378173c656ce18a155ffc14a9fc4355
        with:
          # If you bump the version, also update docs/contributing.md
          # and all other workflows that install uv
          version: "0.5.1"
      - name: Run Codespell
        run: uv run -- codespell && echo Codespell exited successfully

  check-doctests:
    name: check (doctests)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@1482605bfc5719782e1267fd0c0cc350fe7646b8
        with:
          toolchain: 1.76
      # NOTE: We need to run `cargo test --doc` separately from normal tests:
      # - `cargo build --all-targets` specifies: "Build all targets"
      # - `cargo test --all-targets` specifies: "Test all targets (does not include doctests)"
      - name: Run doctests
        run: cargo test --workspace --doc
        env:
          RUST_BACKTRACE: 1
      - name: Check `cargo doc` for lint issues
        env:
          RUSTDOCFLAGS: "--deny warnings"
        run: cargo doc --workspace --no-deps

  check-mkdocs:
    name: check (mkdocs)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38
        with:
          python-version: 3.11
      - name: Install uv
        uses: astral-sh/setup-uv@4db96194c378173c656ce18a155ffc14a9fc4355
        with:
          # If you bump the version, also update docs/contributing.md
          # and all other workflows that install uv
          version: "0.5.1"
      - name: Check that `mkdocs` can build the docs
        run: uv run -- mkdocs build --strict

  # An optional job to alert us when uv updates break the build
  check-mkdocs-latest:
    name: check (latest mkdocs, optional)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false
      - name: Install uv
        uses: astral-sh/setup-uv@4db96194c378173c656ce18a155ffc14a9fc4355
      # 'only-managed' means that uv will always download Python, even
      # if the runner happens to provide a compatible version
      - name: Check that `mkdocs` can build the docs
        run: uv run --python-preference=only-managed -- mkdocs build --strict

  check-zizmor:
    name: check (zizmor)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          persist-credentials: false

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@4db96194c378173c656ce18a155ffc14a9fc4355

      - name: Run zizmor
        run: uvx zizmor --format sarif . > results.sarif 
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@9e8d0789d4a0fa9ceb6b1738f7e269594bdd67f0
        with:
          sarif_file: results.sarif
          category: zizmor
